// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace okrpc {
class ListRpcRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpcRequest> _instance;
} _ListRpcRequest_default_instance_;
class ListRpcResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpcResponse> _instance;
} _ListRpcResponse_default_instance_;
class GetServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceRequest> _instance;
} _GetServiceRequest_default_instance_;
class GetServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServiceResponse> _instance;
} _GetServiceResponse_default_instance_;
}  // namespace okrpc
static void InitDefaultsscc_info_GetServiceRequest_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::okrpc::_GetServiceRequest_default_instance_;
    new (ptr) ::okrpc::GetServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::okrpc::GetServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceRequest_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceRequest_rpcservice_2eproto}, {}};

static void InitDefaultsscc_info_GetServiceResponse_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::okrpc::_GetServiceResponse_default_instance_;
    new (ptr) ::okrpc::GetServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::okrpc::GetServiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServiceResponse_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServiceResponse_rpcservice_2eproto}, {}};

static void InitDefaultsscc_info_ListRpcRequest_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::okrpc::_ListRpcRequest_default_instance_;
    new (ptr) ::okrpc::ListRpcRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::okrpc::ListRpcRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRpcRequest_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListRpcRequest_rpcservice_2eproto}, {}};

static void InitDefaultsscc_info_ListRpcResponse_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::okrpc::_ListRpcResponse_default_instance_;
    new (ptr) ::okrpc::ListRpcResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::okrpc::ListRpcResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRpcResponse_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListRpcResponse_rpcservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpcservice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpcservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_rpcservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpcservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcRequest, list_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcResponse, error_),
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcResponse, service_name_),
  PROTOBUF_FIELD_OFFSET(::okrpc::ListRpcResponse, method_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceResponse, error_),
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceResponse, proto_file_),
  PROTOBUF_FIELD_OFFSET(::okrpc::GetServiceResponse, proto_file_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::okrpc::ListRpcRequest)},
  { 7, -1, sizeof(::okrpc::ListRpcResponse)},
  { 15, -1, sizeof(::okrpc::GetServiceRequest)},
  { 21, -1, sizeof(::okrpc::GetServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::okrpc::_ListRpcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::okrpc::_ListRpcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::okrpc::_GetServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::okrpc::_GetServiceResponse_default_instance_),
};

const char descriptor_table_protodef_rpcservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rpcservice.proto\022\005okrpc\032 google/protob"
  "uf/descriptor.proto\032\trpc.proto\";\n\016ListRp"
  "cRequest\022\024\n\014service_name\030\001 \001(\t\022\023\n\013list_m"
  "ethod\030\002 \001(\010\"]\n\017ListRpcResponse\022\037\n\005error\030"
  "\001 \001(\0162\020.okrpc.ErrorCode\022\024\n\014service_name\030"
  "\002 \003(\t\022\023\n\013method_name\030\003 \003(\t\")\n\021GetService"
  "Request\022\024\n\014service_name\030\001 \001(\t\"b\n\022GetServ"
  "iceResponse\022\037\n\005error\030\001 \001(\0162\020.okrpc.Error"
  "Code\022\022\n\nproto_file\030\002 \003(\t\022\027\n\017proto_file_n"
  "ame\030\003 \003(\t2\211\001\n\nRpcService\0228\n\007listRpc\022\025.ok"
  "rpc.ListRpcRequest\032\026.okrpc.ListRpcRespon"
  "se\022A\n\ngetService\022\030.okrpc.GetServiceReque"
  "st\032\031.okrpc.GetServiceResponseB\003\200\001\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpcservice_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_rpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpcservice_2eproto_sccs[4] = {
  &scc_info_GetServiceRequest_rpcservice_2eproto.base,
  &scc_info_GetServiceResponse_rpcservice_2eproto.base,
  &scc_info_ListRpcRequest_rpcservice_2eproto.base,
  &scc_info_ListRpcResponse_rpcservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpcservice_2eproto_once;
static bool descriptor_table_rpcservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcservice_2eproto = {
  &descriptor_table_rpcservice_2eproto_initialized, descriptor_table_protodef_rpcservice_2eproto, "rpcservice.proto", 522,
  &descriptor_table_rpcservice_2eproto_once, descriptor_table_rpcservice_2eproto_sccs, descriptor_table_rpcservice_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_rpcservice_2eproto::offsets,
  file_level_metadata_rpcservice_2eproto, 4, file_level_enum_descriptors_rpcservice_2eproto, file_level_service_descriptors_rpcservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpcservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpcservice_2eproto), true);
namespace okrpc {

// ===================================================================

void ListRpcRequest::InitAsDefaultInstance() {
}
class ListRpcRequest::_Internal {
 public:
};

ListRpcRequest::ListRpcRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:okrpc.ListRpcRequest)
}
ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  list_method_ = from.list_method_;
  // @@protoc_insertion_point(copy_constructor:okrpc.ListRpcRequest)
}

void ListRpcRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpcRequest_rpcservice_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  list_method_ = false;
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:okrpc.ListRpcRequest)
  SharedDtor();
}

void ListRpcRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpcRequest& ListRpcRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpcRequest_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void ListRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:okrpc.ListRpcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  list_method_ = false;
  _internal_metadata_.Clear();
}

const char* ListRpcRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_name(), ptr, ctx, "okrpc.ListRpcRequest.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool list_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          list_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpcRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:okrpc.ListRpcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.ListRpcRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // bool list_method = 2;
  if (this->list_method() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:okrpc.ListRpcRequest)
  return target;
}

size_t ListRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:okrpc.ListRpcRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // bool list_method = 2;
  if (this->list_method() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpcRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:okrpc.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpcRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpcRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:okrpc.ListRpcRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:okrpc.ListRpcRequest)
    MergeFrom(*source);
  }
}

void ListRpcRequest::MergeFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:okrpc.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.list_method() != 0) {
    _internal_set_list_method(from._internal_list_method());
  }
}

void ListRpcRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:okrpc.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:okrpc.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {
  return true;
}

void ListRpcRequest::InternalSwap(ListRpcRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(list_method_, other->list_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpcResponse::InitAsDefaultInstance() {
}
class ListRpcResponse::_Internal {
 public:
};

ListRpcResponse::ListRpcResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:okrpc.ListRpcResponse)
}
ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_name_(from.service_name_),
      method_name_(from.method_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:okrpc.ListRpcResponse)
}

void ListRpcResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpcResponse_rpcservice_2eproto.base);
  error_ = 0;
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:okrpc.ListRpcResponse)
  SharedDtor();
}

void ListRpcResponse::SharedDtor() {
}

void ListRpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpcResponse& ListRpcResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpcResponse_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void ListRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:okrpc.ListRpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.Clear();
  method_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

const char* ListRpcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .okrpc.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::okrpc::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_service_name(), ptr, ctx, "okrpc.ListRpcResponse.service_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_method_name(), ptr, ctx, "okrpc.ListRpcResponse.method_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpcResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:okrpc.ListRpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .okrpc.ErrorCode error = 1;
  if (this->error() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->_internal_service_name_size(); i < n; i++) {
    const auto& s = this->_internal_service_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.ListRpcResponse.service_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->_internal_method_name_size(); i < n; i++) {
    const auto& s = this->_internal_method_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.ListRpcResponse.method_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:okrpc.ListRpcResponse)
  return target;
}

size_t ListRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:okrpc.ListRpcResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_name_.size());
  for (int i = 0, n = service_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_name_.Get(i));
  }

  // repeated string method_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(method_name_.size());
  for (int i = 0, n = method_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      method_name_.Get(i));
  }

  // .okrpc.ErrorCode error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpcResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:okrpc.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpcResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpcResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:okrpc.ListRpcResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:okrpc.ListRpcResponse)
    MergeFrom(*source);
  }
}

void ListRpcResponse::MergeFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:okrpc.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_name_.MergeFrom(from.service_name_);
  method_name_.MergeFrom(from.method_name_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void ListRpcResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:okrpc.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:okrpc.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  return true;
}

void ListRpcResponse::InternalSwap(ListRpcResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.InternalSwap(&other->service_name_);
  method_name_.InternalSwap(&other->method_name_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServiceRequest::InitAsDefaultInstance() {
}
class GetServiceRequest::_Internal {
 public:
};

GetServiceRequest::GetServiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:okrpc.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:okrpc.GetServiceRequest)
}

void GetServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceRequest_rpcservice_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:okrpc.GetServiceRequest)
  SharedDtor();
}

void GetServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceRequest& GetServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceRequest_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:okrpc.GetServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_name(), ptr, ctx, "okrpc.GetServiceRequest.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:okrpc.GetServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.GetServiceRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:okrpc.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:okrpc.GetServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:okrpc.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:okrpc.GetServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:okrpc.GetServiceRequest)
    MergeFrom(*source);
  }
}

void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:okrpc.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void GetServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:okrpc.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:okrpc.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServiceResponse::InitAsDefaultInstance() {
}
class GetServiceResponse::_Internal {
 public:
};

GetServiceResponse::GetServiceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:okrpc.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      proto_file_(from.proto_file_),
      proto_file_name_(from.proto_file_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:okrpc.GetServiceResponse)
}

void GetServiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServiceResponse_rpcservice_2eproto.base);
  error_ = 0;
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:okrpc.GetServiceResponse)
  SharedDtor();
}

void GetServiceResponse::SharedDtor() {
}

void GetServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceResponse& GetServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServiceResponse_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:okrpc.GetServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_file_.Clear();
  proto_file_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

const char* GetServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .okrpc.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::okrpc::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string proto_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_proto_file(), ptr, ctx, "okrpc.GetServiceResponse.proto_file");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string proto_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_proto_file_name(), ptr, ctx, "okrpc.GetServiceResponse.proto_file_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServiceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:okrpc.GetServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .okrpc.ErrorCode error = 1;
  if (this->error() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated string proto_file = 2;
  for (int i = 0, n = this->_internal_proto_file_size(); i < n; i++) {
    const auto& s = this->_internal_proto_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.GetServiceResponse.proto_file");
    target = stream->WriteString(2, s, target);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0, n = this->_internal_proto_file_name_size(); i < n; i++) {
    const auto& s = this->_internal_proto_file_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "okrpc.GetServiceResponse.proto_file_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:okrpc.GetServiceResponse)
  return target;
}

size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:okrpc.GetServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proto_file = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proto_file_.size());
  for (int i = 0, n = proto_file_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proto_file_.Get(i));
  }

  // repeated string proto_file_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proto_file_name_.size());
  for (int i = 0, n = proto_file_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proto_file_name_.Get(i));
  }

  // .okrpc.ErrorCode error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:okrpc.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:okrpc.GetServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:okrpc.GetServiceResponse)
    MergeFrom(*source);
  }
}

void GetServiceResponse::MergeFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:okrpc.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_file_.MergeFrom(from.proto_file_);
  proto_file_name_.MergeFrom(from.proto_file_name_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void GetServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:okrpc.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:okrpc.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proto_file_.InternalSwap(&other->proto_file_);
  proto_file_name_.InternalSwap(&other->proto_file_name_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RpcService::~RpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpcservice_2eproto);
  return file_level_service_descriptors_rpcservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::okrpc::ListRpcRequest*,
                         ::okrpc::ListRpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listRpc() not implemented.");
  done->Run();
}

void RpcService::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::okrpc::GetServiceRequest*,
                         ::okrpc::GetServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getService() not implemented.");
  done->Run();
}

void RpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpcservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      listRpc(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::okrpc::ListRpcRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::okrpc::ListRpcResponse*>(
                 response),
             done);
      break;
    case 1:
      getService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::okrpc::GetServiceRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::okrpc::GetServiceResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::okrpc::ListRpcRequest::default_instance();
    case 1:
      return ::okrpc::GetServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::okrpc::ListRpcResponse::default_instance();
    case 1:
      return ::okrpc::GetServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_Stub::RpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::okrpc::ListRpcRequest* request,
                              ::okrpc::ListRpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RpcService_Stub::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::okrpc::GetServiceRequest* request,
                              ::okrpc::GetServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace okrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::okrpc::ListRpcRequest* Arena::CreateMaybeMessage< ::okrpc::ListRpcRequest >(Arena* arena) {
  return Arena::CreateInternal< ::okrpc::ListRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::okrpc::ListRpcResponse* Arena::CreateMaybeMessage< ::okrpc::ListRpcResponse >(Arena* arena) {
  return Arena::CreateInternal< ::okrpc::ListRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::okrpc::GetServiceRequest* Arena::CreateMaybeMessage< ::okrpc::GetServiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::okrpc::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::okrpc::GetServiceResponse* Arena::CreateMaybeMessage< ::okrpc::GetServiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::okrpc::GetServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
